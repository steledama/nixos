# modules/home/niri.nix
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.wm;
in {
  config = {
    # Generate config.kdl with proper KDL syntax
    xdg.configFile."niri/config.kdl".text = ''
      // Niri config file automatically generated by NixOS

      input {
        keyboard {
          xkb {
            layout "${cfg.keyboard.layout}"
            variant "${cfg.keyboard.variant}"
            options "${cfg.keyboard.options}"
          }
        }
        touchpad {
          tap
          natural-scroll
        }
      }

      ${lib.concatStringsSep "\n" (map (
          monitor:
            if monitor.name != "default"
            then ''
              output "${monitor.name}" {
                ${lib.optionalString (monitor.mode != null) ''
                mode "${toString monitor.mode.width}x${toString monitor.mode.height}"
              ''}
                scale ${toString monitor.scale}
                ${lib.optionalString (monitor.transform != "normal" && monitor.transform != "") ''
                transform "${monitor.transform}"
              ''}
                position x=${toString monitor.position.x} y=${toString monitor.position.y}
              }
            ''
            else ""
        )
        cfg.monitors)}

      // Layout configuration
      layout {
        gaps 16
        center-focused-column "never"

        preset-column-widths {
          proportion 0.33333
          proportion 0.5
          proportion 0.66667
        }

        default-column-width {
          proportion 0.5
        }

        focus-ring {
          width 4
          active-color "#7fc8ff"
          inactive-color "#505050"
        }

        border {
          width 2
        }

        shadow {
          // Enable shadow
          on
        }
      }

      // Screenshot path
      screenshot-path "${cfg.screenshots.path}"

      // Spawn programs at startup
      spawn-at-startup "waybar"
      spawn-at-startup "swaync"
      
      // Run autostart script which will set the wallpaper
      spawn-at-startup "${config.home.homeDirectory}/.config/niri/autostart.sh"

      // Key bindings
      binds {
        // Hotkey overlay
        "Mod+Shift+S" { show-hotkey-overlay; }

        // Applications
        "Mod+M" { spawn "alacritty"; }
        "Mod+A" { spawn "fuzzel"; }
        "Mod+N" { spawn "swaync-client" "-t" "-sw"; }
        "Mod+L" { spawn "screen-locker"; }
        "Mod+Escape" { spawn "wlogout"; }

        // Audio controls
        "XF86AudioRaiseVolume" { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
        "XF86AudioLowerVolume" { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
        "XF86AudioMute" { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }

        // Window management
        "Mod+BackSpace" { close-window; }
        "Alt+Tab" { focus-column-right; }
        "Alt+Shift+Tab" { focus-column-left; }

        // Direction-based navigation
        "Mod+Left" { focus-column-left; }
        "Mod+Down" { focus-window-down; }
        "Mod+Up" { focus-window-up; }
        "Mod+Right" { focus-column-right; }

        // Window movement
        "Mod+Ctrl+Left" { move-column-left; }
        "Mod+Ctrl+Down" { move-window-down; }
        "Mod+Ctrl+Up" { move-window-up; }
        "Mod+Ctrl+Right" { move-column-right; }

        // Monitor focus
        "Mod+Shift+Left" { focus-monitor-left; }
        "Mod+Shift+Down" { focus-monitor-down; }
        "Mod+Shift+Up" { focus-monitor-up; }
        "Mod+Shift+Right" { focus-monitor-right; }

        // Move to monitor
        "Mod+Shift+Ctrl+Left" { move-column-to-monitor-left; }
        "Mod+Shift+Ctrl+Down" { move-column-to-monitor-down; }
        "Mod+Shift+Ctrl+Up" { move-column-to-monitor-up; }
        "Mod+Shift+Ctrl+Right" { move-column-to-monitor-right; }

        // Workspace navigation
        "Mod+Page_Down" { focus-workspace-down; }
        "Mod+Page_Up" { focus-workspace-up; }

        // Move to workspace
        "Mod+Ctrl+Page_Down" { move-column-to-workspace-down; }
        "Mod+Ctrl+Page_Up" { move-column-to-workspace-up; }

        // Workspace focus (1-9)
        ${lib.concatStringsSep "\n  " (builtins.genList (
          i: let
            num = i + 1;
          in ''
            "Mod+${toString num}" { focus-workspace ${toString num}; }''
        )
        9)}

        // Move to workspace (1-9)
        ${lib.concatStringsSep "\n  " (builtins.genList (
          i: let
            num = i + 1;
          in ''
            "Mod+Ctrl+${toString num}" { move-column-to-workspace ${toString num}; }''
        )
        9)}

        // Consume/Expel window management
        "Mod+BracketLeft" { consume-or-expel-window-left; }
        "Mod+BracketRight" { consume-or-expel-window-right; }

        // Column operations
        "Mod+Comma" { consume-window-into-column; }
        "Mod+Period" { expel-window-from-column; }
        "Mod+R" { switch-preset-column-width; }
        "Mod+F" { maximize-column; }
        "Mod+Shift+F" { fullscreen-window; }
        "Mod+C" { center-column; }

        // Size adjustments
        "Mod+Minus" { set-column-width "-10%"; }
        "Mod+Equal" { set-column-width "+10%"; }
        "Mod+Shift+Minus" { set-window-height "-10%"; }
        "Mod+Shift+Equal" { set-window-height "+10%"; }

        // Window modes
        "Mod+V" { toggle-window-floating; }
        "Mod+Shift+V" { switch-focus-between-floating-and-tiling; }
        "Mod+Space" { toggle-column-tabbed-display; }

        // Screenshots
        "Print" { screenshot; }
        "Ctrl+Print" { screenshot-screen; }
        "Alt+Print" { screenshot-window; }

        // System
        "Mod+Shift+P" { power-off-monitors; }
        "Mod+Alt+E" { quit; }
        "Ctrl+Alt+Delete" { quit; }
      }
    '';

    # Create the autostart script
    home.file.".config/niri/autostart.sh" = {
      text = ''
        #!/bin/sh
        
        # Wait a bit for Niri to fully initialize
        sleep 3
        
        # Kill any existing swaybg instances
        pkill -f swaybg || true
        
        # Set the wallpaper for each monitor
        ${lib.concatMapStrings (monitor: ''
        ${pkgs.swaybg}/bin/swaybg -m ${monitor.wallpaper.mode} -i ${monitor.wallpaper.path} ${if monitor.name != "default" then "-o ${monitor.name}" else ""} &
        '') cfg.monitors}
        
        # Keep the script running to prevent its child processes from being terminated
        wait
      '';
      executable = true;
    };

    # Make sure swaybg is installed
    home.packages = with pkgs; [
      niri
      swaybg
    ];
  };
}
