# modules/home/niri.nix
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.wm;
in {
  config = {
    # Generate config.kdl with proper KDL syntax
    xdg.configFile."niri/config.kdl".text = ''
      // Niri config file automatically generated by NixOS

      input {
        keyboard {
          xkb {
            layout "${cfg.keyboard.layout}"
            variant "${cfg.keyboard.variant}"
            options "${cfg.keyboard.options}"
          }
        }
        touchpad {
          tap
          natural-scroll
        }
      }

      // Cursor configuration
      cursor {
        xcursor-theme "Adwaita"
        xcursor-size 24
      }

      ${lib.concatStringsSep "\n" (map (
          monitor:
            if monitor.name != "default"
            then ''
              output "${monitor.name}" {
                ${lib.optionalString (monitor.mode != null) ''
                mode "${toString monitor.mode.width}x${toString monitor.mode.height}"
              ''}
                scale ${toString monitor.scale}
                ${lib.optionalString (monitor.transform != "normal" && monitor.transform != "") ''
                transform "${monitor.transform}"
              ''}
                position x=${toString monitor.position.x} y=${toString monitor.position.y}
              }
            ''
            else ""
        )
        cfg.monitors)}

      // Layout configuration
      layout {
        gaps 16
        center-focused-column "never"

        preset-column-widths {
          proportion 0.33333
          proportion 0.5
          proportion 0.66667
        }

        default-column-width {
          proportion 0.5
        }

        focus-ring {
          width 4
          active-color "#7fc8ff"
          inactive-color "#505050"
        }

        border {
          width 2
        }

        shadow {
          // Enable shadow
          on
        }
      }

      // Screenshot path
      screenshot-path "${cfg.screenshots.path}"

      // Spawn programs at startup
      spawn-at-startup "waybar"
      spawn-at-startup "swaync"

      // Run autostart script which will set the wallpaper
      spawn-at-startup "${config.home.homeDirectory}/.config/niri/autostart.sh"

      // Key bindings (to find a key name use 'wev', run 'niri msg action' to get a full list of actions)
      binds {
        // Hotkey overlay
        "Mod+F1" { show-hotkey-overlay; }

        // System
        "Mod+Shift+P" hotkey-overlay-title="Power Off Monitors" { power-off-monitors; }
        "Mod+L" hotkey-overlay-title="Lock Screen" { spawn "screen-locker"; }
        "Mod+Escape" hotkey-overlay-title="Logout Menu" { spawn "wlogout"; }
        "Ctrl+Alt+Delete" { quit; }

        // Applications
        "Mod+A" hotkey-overlay-title="Application Launcher" { spawn "fuzzel"; }
        "Mod+B" hotkey-overlay-title="Open Browser" { spawn "firefox"; }
        "Mod+E" hotkey-overlay-title="File explorer" { spawn "nautilus"; }
        "Mod+M" hotkey-overlay-title="Mail client" { spawn "thunderbird"; }
        "Mod+X" hotkey-overlay-title="Open Terminal" { spawn "ghostty"; }

        // Window size
        "Mod+BackSpace" { close-window; }
        "Mod+Shift+F" { fullscreen-window; }
        "Mod+F" { maximize-column; }
        "Mod+R" { switch-preset-column-width; }
        "Mod+C" { center-column; }
        "Mod+Minus" { set-column-width "-10%"; }
        "Mod+Equal" { set-column-width "+10%"; }
        "Mod+Shift+Minus" { set-window-height "-10%"; }
        "Mod+Shift+Equal" { set-window-height "+10%"; }
        "Mod+V" { toggle-window-floating; }

        // Alt - Window focus
        "Alt+Tab" { focus-column-right-or-first; }
        "Alt+Shift+Tab" { focus-column-left-or-last; }
        "Alt+BackSpace" { focus-window-previous; }

        // Mod + Arrow Keys - Column/Window focus
        "Mod+Left" { focus-column-left; }
        "Mod+Right" { focus-column-right; }
        "Mod+Up" { focus-window-up; }
        "Mod+Down" { focus-window-down; }

        // Mod + Number - Workspace focus
        ${lib.concatStringsSep "\n  " (builtins.genList (
          i: let
            num = i + 1;
          in ''
            "Mod+${toString num}" { focus-workspace ${toString num}; }''
        )
        9)}

        // Mod + Ctrl + Arrow Keys - Move Column/Window within workspace
        "Mod+Ctrl+Left" { move-column-left; }
        "Mod+Ctrl+Right" { move-column-right; }
        "Mod+Ctrl+Down" { move-window-down; }
        "Mod+Ctrl+Up" { move-window-up; }

        // Mod + Shift + Arrow Keys - Monitor focus
        "Mod+Shift+Left" { focus-monitor-left; }
        "Mod+Shift+Down" { focus-monitor-down; }
        "Mod+Shift+Up" { focus-monitor-up; }
        "Mod+Shift+Right" { focus-monitor-right; }

        // Mod + Ctrl + Shift + Arrow Keys - Move column to Monitor
        "Mod+Shift+Ctrl+Left" { move-column-to-monitor-left; }
        "Mod+Shift+Ctrl+Down" { move-column-to-monitor-down; }
        "Mod+Shift+Ctrl+Up" { move-column-to-monitor-up; }
        "Mod+Shift+Ctrl+Right" { move-column-to-monitor-right; }

        // Mod + Ctrl + Number - Column movement - Workspaces
        ${lib.concatStringsSep "\n  " (builtins.genList (
          i: let
            num = i + 1;
          in ''
            "Mod+Ctrl+${toString num}" { move-column-to-workspace ${toString num}; }''
        )
        9)}

        // Window movement - Others
        "Mod+BracketLeft" { consume-or-expel-window-left; }
        "Mod+BracketRight" { consume-or-expel-window-right; }
        "Mod+Comma" { consume-window-into-column; }
        "Mod+Period" { expel-window-from-column; }
        "Mod+Space" { toggle-column-tabbed-display; }
        "Mod+Shift+V" { switch-focus-between-floating-and-tiling; }

        // Mod + Page Up/Down - Workspace focus
        "Mod+Page_Down" { focus-workspace-down; }
        "Mod+Page_Up" { focus-workspace-up; }

        // Mod + Ctrl + Page Up/Down - Move column to workspaces
        "Mod+Ctrl+Page_Down" { move-column-to-workspace-down; }
        "Mod+Ctrl+Page_Up" { move-column-to-workspace-up; }

        // Screenshots
        "Print" hotkey-overlay-title="Interactive Screenshot" { screenshot; }
        "Shift+Print" hotkey-overlay-title="Screenshot Current Screen" { screenshot-screen; }
        "Alt+Print" hotkey-overlay-title="Screenshot Current Window" { screenshot-window; }

        // Audio controls
        "XF86AudioRaiseVolume" hotkey-overlay-title="Volume Up" { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
        "XF86AudioLowerVolume" hotkey-overlay-title="Volume Down" { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
        "XF86AudioMute" hotkey-overlay-title="Toggle Mute" { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }

        // Brightness controls
        "XF86MonBrightnessUp" hotkey-overlay-title="Brightness Up" { spawn "brightnessctl" "set" "5%+"; }
        "XF86MonBrightnessDown" hotkey-overlay-title="Brightness Down" { spawn "brightnessctl" "set" "5%-"; }
        "Shift+XF86MonBrightnessUp" hotkey-overlay-title="Brightness Fine Up" { spawn "brightnessctl" "set" "1%+"; }
        "Shift+XF86MonBrightnessDown" hotkey-overlay-title="Brightness Fine Down" { spawn "brightnessctl" "set" "1%-"; }
      }
    '';

    # Create the autostart script
    home.file.".config/niri/autostart.sh" = {
      text = ''
        #!/bin/sh

        # Wait a bit for Niri to fully initialize
        sleep 3

        # Kill any existing swaybg instances
        pkill -f swaybg || true

        # Set all wallpapers with a single swaybg instance and multiple outputs
        ${pkgs.swaybg}/bin/swaybg \
        ${lib.concatStringsSep " \\\n  " (map (
            monitor:
              if monitor.name != "default"
              then "-o ${monitor.name} -m ${monitor.wallpaper.mode} -i ${monitor.wallpaper.path}"
              else ""
          )
          cfg.monitors)} &

        # Keep the script running to prevent its child processes from being terminated
        wait
      '';
      executable = true;
    };

    # Make sure niri is installed
    home.packages = with pkgs; [
      niri
    ];
  };
}
